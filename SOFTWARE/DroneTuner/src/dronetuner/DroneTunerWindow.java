/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dronetuner;

import com.fazecast.jSerialComm.SerialPort;
import Chart.Chart;
import java.awt.Color;
import org.jfree.data.xy.XYDataItem;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import utils.DroneMotors;
import utils.LoadData;
import utils.PidData;
import utils.SaveCharts;
import utils.SaveData;
import utils.Serial;

/**
 *
 * @author Asafe
 */
public class DroneTunerWindow extends javax.swing.JFrame implements Serial.DataListener {

    // Colors to Drone Image
    private final Color RED = new Color(255, 0, 0, 190);
    private final Color GREEN = new Color(0, 255, 0, 190);
    private final Color BLUE = new Color(0, 0, 255, 190);
    private final Color YELLOW = new Color(255, 255, 0, 190);

    // Chart variables
    private Chart chartYaw, chartPitch, chartRoll, chartMotors;

    // Motors variables
    private final DroneMotors Drone;

    // Serial Port variable
    private SerialPort commPort;
    private final Serial serial;

    /**
     * Creates new form DroneTunerWindow
     */
    public DroneTunerWindow() {

        Drone = new DroneMotors();

        initComponents();

        configCharts();

        serial = new Serial();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        Graphics2D graph = (Graphics2D) g;

        // Smooth draw
        graph.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Get Location of DroneImage
        Point p = SwingUtilities.convertPoint(panelMotors, DroneImage.getLocation(), this);

        // Draws fill arcs representing the force of the motor
        // -- M1
        graph.setColor(RED);
        graph.fillArc(p.x, p.y, 101, 101, 90, -Drone.motors[DroneMotors.M1_ID].getPowerAngle());
        // -- M2
        graph.setColor(BLUE);
        graph.fillArc(p.x + 104, p.y, 101, 101, 90, -Drone.motors[DroneMotors.M2_ID].getPowerAngle());
        // -- M3
        graph.setColor(YELLOW);
        graph.fillArc(p.x + 104, p.y + 103, 101, 101, 90, -Drone.motors[DroneMotors.M3_ID].getPowerAngle());
        // -- M4
        graph.setColor(GREEN);
        graph.fillArc(p.x, p.y + 103, 101, 101, 90, -Drone.motors[DroneMotors.M4_ID].getPowerAngle());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelSetup = new javax.swing.JPanel();
        panelSerialConn = new javax.swing.JPanel();
        textSerialPort = new javax.swing.JTextField();
        labelPort = new javax.swing.JLabel();
        labelBaudRate = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        serialStatus = new javax.swing.JLabel();
        buttonSerialConnect = new javax.swing.JButton();
        buttonSerialDisconnect = new javax.swing.JButton();
        boxSerialBaudRate = new javax.swing.JComboBox<>();
        panelMotors = new javax.swing.JPanel();
        DroneImage = new javax.swing.JLabel();
        labelPowerM1 = new javax.swing.JLabel();
        labelPowerM2 = new javax.swing.JLabel();
        labelPowerM3 = new javax.swing.JLabel();
        labelPowerM4 = new javax.swing.JLabel();
        panelData = new javax.swing.JPanel();
        labelPIDParam = new javax.swing.JLabel();
        labelChartData = new javax.swing.JLabel();
        buttonSavePID = new javax.swing.JButton();
        buttonLoadPID = new javax.swing.JButton();
        buttonSaveCharts = new javax.swing.JButton();
        saveYaw = new javax.swing.JCheckBox();
        savePitch = new javax.swing.JCheckBox();
        saveRoll = new javax.swing.JCheckBox();
        saveMotors = new javax.swing.JCheckBox();
        panelGraphs = new javax.swing.JPanel();
        panelChartYaw = new javax.swing.JPanel();
        panelChartPitch = new javax.swing.JPanel();
        panelChartRoll = new javax.swing.JPanel();
        panelConfigYaw = new javax.swing.JPanel();
        labelKP_Yaw = new javax.swing.JLabel();
        labelKI_Yaw = new javax.swing.JLabel();
        labelKD_Yaw = new javax.swing.JLabel();
        javax.swing.SpinnerNumberModel modelKP_Yaw = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKP_Yaw = new javax.swing.JSpinner(modelKP_Yaw);
        javax.swing.SpinnerNumberModel modelKI_Yaw = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKI_Yaw = new javax.swing.JSpinner(modelKI_Yaw);
        javax.swing.SpinnerNumberModel modelKD_Yaw = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKD_Yaw = new javax.swing.JSpinner(modelKD_Yaw);
        labelSetPoint_Yaw = new javax.swing.JLabel();
        labelInput_Yaw = new javax.swing.JLabel();
        labelTimeRange_Yaw = new javax.swing.JLabel();
        spinnerTimeRange_Yaw = new javax.swing.JSpinner();
        buttonClear_Yaw = new javax.swing.JButton();
        textSetPoint_Yaw = new javax.swing.JTextField();
        textInput_Yaw = new javax.swing.JTextField();
        panelConfigPitch = new javax.swing.JPanel();
        labelKP_Pitch = new javax.swing.JLabel();
        labelKI_Pitch = new javax.swing.JLabel();
        labelKD_Pitch = new javax.swing.JLabel();
        javax.swing.SpinnerNumberModel modelKP_Pitch = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKP_Pitch = new javax.swing.JSpinner(modelKP_Pitch);
        javax.swing.SpinnerNumberModel modelKI_Pitch = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKI_Pitch = new javax.swing.JSpinner(modelKI_Pitch);
        javax.swing.SpinnerNumberModel modelKD_Pitch = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKD_Pitch = new javax.swing.JSpinner(modelKD_Pitch);
        labelSetPoint_Pitch = new javax.swing.JLabel();
        labelInput_Pitch = new javax.swing.JLabel();
        labelTimeRange_Pitch = new javax.swing.JLabel();
        spinnerTimeRange_Pitch = new javax.swing.JSpinner();
        buttonClear_Pitch = new javax.swing.JButton();
        textSetPoint_Pitch = new javax.swing.JTextField();
        textInput_Pitch = new javax.swing.JTextField();
        panelConfigRoll = new javax.swing.JPanel();
        labelKP_Roll = new javax.swing.JLabel();
        labelKI_Roll = new javax.swing.JLabel();
        labelKD_Roll = new javax.swing.JLabel();
        javax.swing.SpinnerNumberModel modelKP_Roll = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKP_Roll = new javax.swing.JSpinner(modelKP_Roll);
        javax.swing.SpinnerNumberModel modelKI_Roll = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKI_Roll = new javax.swing.JSpinner(modelKI_Roll);
        javax.swing.SpinnerNumberModel modelKD_Roll = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKD_Roll = new javax.swing.JSpinner(modelKD_Roll);
        labelSetPoint_Roll = new javax.swing.JLabel();
        labelInput_Roll = new javax.swing.JLabel();
        labelTimeRange_Roll = new javax.swing.JLabel();
        spinnerTimeRange_Roll = new javax.swing.JSpinner();
        buttonClear_Roll = new javax.swing.JButton();
        textSetPoint_Roll = new javax.swing.JTextField();
        textInput_Roll = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Drone Tuner");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("/inserts/icon.png")).getImage());
        setResizable(false);

        panelSetup.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        panelSerialConn.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serial Connection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        textSerialPort.setText("COM");
        textSerialPort.setPreferredSize(new java.awt.Dimension(80, 20));

        labelPort.setText("Port (ex: COM3)");

        labelBaudRate.setText("Baud Rate");

        labelStatus.setText("STATUS:");

        serialStatus.setForeground(new java.awt.Color(153, 0, 0));
        serialStatus.setText("DISCONNECTED");

        buttonSerialConnect.setText("CONNECT");
        buttonSerialConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSerialConnectActionPerformed(evt);
            }
        });

        buttonSerialDisconnect.setText("DISCONNECT");
        buttonSerialDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSerialDisconnectActionPerformed(evt);
            }
        });

        boxSerialBaudRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9600", "19200", "38400", "57600", "74880", "115200", "230400", "250000" }));
        boxSerialBaudRate.setToolTipText("");

        javax.swing.GroupLayout panelSerialConnLayout = new javax.swing.GroupLayout(panelSerialConn);
        panelSerialConn.setLayout(panelSerialConnLayout);
        panelSerialConnLayout.setHorizontalGroup(
            panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSerialConnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSerialConnLayout.createSequentialGroup()
                        .addComponent(buttonSerialConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSerialDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelSerialConnLayout.createSequentialGroup()
                        .addComponent(labelStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(serialStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSerialConnLayout.createSequentialGroup()
                        .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPort)
                            .addComponent(labelBaudRate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textSerialPort, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(boxSerialBaudRate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        panelSerialConnLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonSerialConnect, buttonSerialDisconnect});

        panelSerialConnLayout.setVerticalGroup(
            panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSerialConnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPort)
                    .addComponent(textSerialPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBaudRate)
                    .addComponent(boxSerialBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSerialConnect)
                    .addComponent(buttonSerialDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStatus)
                    .addComponent(serialStatus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMotors.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Motors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        DroneImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DroneImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inserts/Drone.png"))); // NOI18N
        DroneImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        labelPowerM1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPowerM1.setText("0%");

        labelPowerM2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPowerM2.setText("0%");

        labelPowerM3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPowerM3.setText("0%");

        labelPowerM4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPowerM4.setText("0%");

        javax.swing.GroupLayout panelMotorsLayout = new javax.swing.GroupLayout(panelMotors);
        panelMotors.setLayout(panelMotorsLayout);
        panelMotorsLayout.setHorizontalGroup(
            panelMotorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMotorsLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(DroneImage)
                .addGap(23, 23, 23))
            .addGroup(panelMotorsLayout.createSequentialGroup()
                .addGroup(panelMotorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMotorsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelPowerM4)
                        .addGap(91, 91, 91))
                    .addGroup(panelMotorsLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(labelPowerM1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(panelMotorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMotorsLayout.createSequentialGroup()
                        .addComponent(labelPowerM2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMotorsLayout.createSequentialGroup()
                        .addComponent(labelPowerM3)
                        .addGap(61, 61, 61))))
        );
        panelMotorsLayout.setVerticalGroup(
            panelMotorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMotorsLayout.createSequentialGroup()
                .addGroup(panelMotorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPowerM1)
                    .addComponent(labelPowerM2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DroneImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMotorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPowerM3)
                    .addComponent(labelPowerM4)))
        );

        panelData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        labelPIDParam.setText("PID Parameters");

        labelChartData.setText("Chart Data");

        buttonSavePID.setText("SAVE DATA");
        buttonSavePID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSavePIDActionPerformed(evt);
            }
        });

        buttonLoadPID.setText("LOAD DATA");
        buttonLoadPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadPIDActionPerformed(evt);
            }
        });

        buttonSaveCharts.setText("SAVE SELECTED");
        buttonSaveCharts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveChartsActionPerformed(evt);
            }
        });

        saveYaw.setSelected(true);
        saveYaw.setText("Yaw");

        savePitch.setSelected(true);
        savePitch.setText("Pitch");

        saveRoll.setSelected(true);
        saveRoll.setText("Roll");

        saveMotors.setSelected(true);
        saveMotors.setText("Motors");

        javax.swing.GroupLayout panelDataLayout = new javax.swing.GroupLayout(panelData);
        panelData.setLayout(panelDataLayout);
        panelDataLayout.setHorizontalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSaveCharts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelDataLayout.createSequentialGroup()
                        .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPIDParam)
                            .addComponent(labelChartData))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelDataLayout.createSequentialGroup()
                        .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelDataLayout.createSequentialGroup()
                                .addComponent(saveYaw)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(savePitch))
                            .addComponent(buttonSavePID, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonLoadPID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDataLayout.createSequentialGroup()
                                .addComponent(saveRoll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(saveMotors)))))
                .addContainerGap())
        );

        panelDataLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttonLoadPID, buttonSavePID});

        panelDataLayout.setVerticalGroup(
            panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDataLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPIDParam)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSavePID)
                    .addComponent(buttonLoadPID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelChartData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveYaw)
                    .addComponent(savePitch)
                    .addComponent(saveRoll)
                    .addComponent(saveMotors))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSaveCharts)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelSetupLayout = new javax.swing.GroupLayout(panelSetup);
        panelSetup.setLayout(panelSetupLayout);
        panelSetupLayout.setHorizontalGroup(
            panelSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelSerialConn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelMotors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelSetupLayout.setVerticalGroup(
            panelSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSerialConn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelMotors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelGraphs.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelGraphs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelGraphsMouseClicked(evt);
            }
        });

        panelChartYaw.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelChartYawLayout = new javax.swing.GroupLayout(panelChartYaw);
        panelChartYaw.setLayout(panelChartYawLayout);
        panelChartYawLayout.setHorizontalGroup(
            panelChartYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );
        panelChartYawLayout.setVerticalGroup(
            panelChartYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 207, Short.MAX_VALUE)
        );

        panelChartPitch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelChartPitchLayout = new javax.swing.GroupLayout(panelChartPitch);
        panelChartPitch.setLayout(panelChartPitchLayout);
        panelChartPitchLayout.setHorizontalGroup(
            panelChartPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );
        panelChartPitchLayout.setVerticalGroup(
            panelChartPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 207, Short.MAX_VALUE)
        );

        panelChartRoll.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelChartRollLayout = new javax.swing.GroupLayout(panelChartRoll);
        panelChartRoll.setLayout(panelChartRollLayout);
        panelChartRollLayout.setHorizontalGroup(
            panelChartRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE)
        );
        panelChartRollLayout.setVerticalGroup(
            panelChartRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelConfigYaw.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Yaw Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        labelKP_Yaw.setText("KP (Proportional)");
        labelKP_Yaw.setPreferredSize(new java.awt.Dimension(100, 14));

        labelKI_Yaw.setText("KI (Integrative)");
        labelKI_Yaw.setPreferredSize(new java.awt.Dimension(100, 14));

        labelKD_Yaw.setText("KD (Derivative)");
        labelKD_Yaw.setPreferredSize(new java.awt.Dimension(100, 14));

        javax.swing.JSpinner.NumberEditor editorKP_Yaw = (javax.swing.JSpinner.NumberEditor)spinnerKP_Yaw.getEditor();
        java.text.DecimalFormat formatKP_Yaw = editorKP_Yaw.getFormat();
        formatKP_Yaw.setMinimumFractionDigits(3);
        spinnerKP_Yaw.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKP_Yaw.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKP_YawStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editorKI_Yaw = (javax.swing.JSpinner.NumberEditor)spinnerKI_Yaw.getEditor();
        java.text.DecimalFormat formatKI_Yaw = editorKI_Yaw.getFormat();
        formatKI_Yaw.setMinimumFractionDigits(3);
        spinnerKI_Yaw.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKI_Yaw.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKI_YawStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editorKD_Yaw = (javax.swing.JSpinner.NumberEditor)spinnerKD_Yaw.getEditor();
        java.text.DecimalFormat formatKD_Yaw = editorKD_Yaw.getFormat();
        formatKD_Yaw.setMinimumFractionDigits(3);
        spinnerKD_Yaw.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKD_Yaw.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKD_YawStateChanged(evt);
            }
        });

        labelSetPoint_Yaw.setText("SETPOINT");
        labelSetPoint_Yaw.setPreferredSize(new java.awt.Dimension(100, 14));

        labelInput_Yaw.setText("INPUT");
        labelInput_Yaw.setPreferredSize(new java.awt.Dimension(100, 14));

        labelTimeRange_Yaw.setText("Time Range");
        labelTimeRange_Yaw.setPreferredSize(new java.awt.Dimension(100, 14));

        spinnerTimeRange_Yaw.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerTimeRange_YawStateChanged(evt);
            }
        });
        spinnerTimeRange_Yaw.setValue(Chart.DEFAULT_RANGE);

        buttonClear_Yaw.setText("Clear");
        buttonClear_Yaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClear_YawActionPerformed(evt);
            }
        });

        textSetPoint_Yaw.setEditable(false);
        textSetPoint_Yaw.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textSetPoint_Yaw.setText("0");
        textSetPoint_Yaw.setMaximumSize(new java.awt.Dimension(82, 20));
        textSetPoint_Yaw.setPreferredSize(new java.awt.Dimension(82, 20));

        textInput_Yaw.setEditable(false);
        textInput_Yaw.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textInput_Yaw.setText("0");
        textInput_Yaw.setMaximumSize(new java.awt.Dimension(82, 20));
        textInput_Yaw.setPreferredSize(new java.awt.Dimension(82, 20));

        javax.swing.GroupLayout panelConfigYawLayout = new javax.swing.GroupLayout(panelConfigYaw);
        panelConfigYaw.setLayout(panelConfigYawLayout);
        panelConfigYawLayout.setHorizontalGroup(
            panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigYawLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConfigYawLayout.createSequentialGroup()
                        .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSetPoint_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelInput_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelConfigYawLayout.createSequentialGroup()
                                .addComponent(labelTimeRange_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerTimeRange_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonClear_Yaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textInput_Yaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textSetPoint_Yaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelConfigYawLayout.createSequentialGroup()
                        .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelKI_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelKD_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelKP_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinnerKP_Yaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerKD_Yaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerKI_Yaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelConfigYawLayout.setVerticalGroup(
            panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigYawLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKP_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKP_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKI_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKI_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKD_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKD_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSetPoint_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSetPoint_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelInput_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textInput_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigYawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerTimeRange_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTimeRange_Yaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear_Yaw))
                .addGap(18, 18, 18))
        );

        panelConfigPitch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pitch Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        labelKP_Pitch.setText("KP (Proportional)");
        labelKP_Pitch.setPreferredSize(new java.awt.Dimension(100, 14));

        labelKI_Pitch.setText("KI (Integrative)");
        labelKI_Pitch.setPreferredSize(new java.awt.Dimension(100, 14));

        labelKD_Pitch.setText("KD (Derivative)");
        labelKD_Pitch.setPreferredSize(new java.awt.Dimension(100, 14));

        javax.swing.JSpinner.NumberEditor editorKP_Pitch = (javax.swing.JSpinner.NumberEditor)spinnerKP_Pitch.getEditor();
        java.text.DecimalFormat formatKP_Pitch = editorKP_Pitch.getFormat();
        formatKP_Pitch.setMinimumFractionDigits(3);
        spinnerKP_Pitch.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKP_Pitch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKP_PitchStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editorKI_Pitch = (javax.swing.JSpinner.NumberEditor)spinnerKI_Pitch.getEditor();
        java.text.DecimalFormat formatKI_Pitch = editorKI_Pitch.getFormat();
        formatKI_Pitch.setMinimumFractionDigits(3);
        spinnerKI_Pitch.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKI_Pitch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKI_PitchStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editorKD_Pitch = (javax.swing.JSpinner.NumberEditor)spinnerKD_Pitch.getEditor();
        java.text.DecimalFormat formatKD_Pitch = editorKD_Pitch.getFormat();
        formatKD_Pitch.setMinimumFractionDigits(3);
        spinnerKD_Pitch.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKD_Pitch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKD_PitchStateChanged(evt);
            }
        });

        labelSetPoint_Pitch.setText("SETPOINT");
        labelSetPoint_Pitch.setPreferredSize(new java.awt.Dimension(100, 14));

        labelInput_Pitch.setText("INPUT");
        labelInput_Pitch.setPreferredSize(new java.awt.Dimension(100, 14));

        labelTimeRange_Pitch.setText("Time Range");
        labelTimeRange_Pitch.setPreferredSize(new java.awt.Dimension(100, 14));

        spinnerTimeRange_Pitch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerTimeRange_PitchStateChanged(evt);
            }
        });
        spinnerTimeRange_Pitch.setValue(Chart.DEFAULT_RANGE);

        buttonClear_Pitch.setText("Clear");
        buttonClear_Pitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClear_PitchActionPerformed(evt);
            }
        });

        textSetPoint_Pitch.setEditable(false);
        textSetPoint_Pitch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textSetPoint_Pitch.setText("0");
        textSetPoint_Pitch.setMaximumSize(new java.awt.Dimension(82, 20));
        textSetPoint_Pitch.setPreferredSize(new java.awt.Dimension(82, 20));

        textInput_Pitch.setEditable(false);
        textInput_Pitch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textInput_Pitch.setText("0");
        textInput_Pitch.setMaximumSize(new java.awt.Dimension(82, 20));
        textInput_Pitch.setPreferredSize(new java.awt.Dimension(82, 20));

        javax.swing.GroupLayout panelConfigPitchLayout = new javax.swing.GroupLayout(panelConfigPitch);
        panelConfigPitch.setLayout(panelConfigPitchLayout);
        panelConfigPitchLayout.setHorizontalGroup(
            panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigPitchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConfigPitchLayout.createSequentialGroup()
                        .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSetPoint_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelInput_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelConfigPitchLayout.createSequentialGroup()
                                .addComponent(labelTimeRange_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerTimeRange_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonClear_Pitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textSetPoint_Pitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textInput_Pitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelConfigPitchLayout.createSequentialGroup()
                        .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelKI_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelKD_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelKP_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinnerKP_Pitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerKD_Pitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerKI_Pitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelConfigPitchLayout.setVerticalGroup(
            panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigPitchLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKP_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKP_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKI_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKI_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKD_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKD_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSetPoint_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSetPoint_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelInput_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textInput_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigPitchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerTimeRange_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTimeRange_Pitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear_Pitch))
                .addGap(18, 18, 18))
        );

        panelConfigRoll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Roll Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        labelKP_Roll.setText("KP (Proportional)");
        labelKP_Roll.setPreferredSize(new java.awt.Dimension(100, 14));

        labelKI_Roll.setText("KI (Integrative)");
        labelKI_Roll.setPreferredSize(new java.awt.Dimension(100, 14));

        labelKD_Roll.setText("KD (Derivative)");
        labelKD_Roll.setPreferredSize(new java.awt.Dimension(100, 14));

        javax.swing.JSpinner.NumberEditor editorKP_Roll = (javax.swing.JSpinner.NumberEditor)spinnerKP_Roll.getEditor();
        java.text.DecimalFormat formatKP_Roll = editorKP_Roll.getFormat();
        formatKP_Roll.setMinimumFractionDigits(3);
        spinnerKP_Roll.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKP_Roll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKP_RollStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editorKI_Roll = (javax.swing.JSpinner.NumberEditor)spinnerKI_Roll.getEditor();
        java.text.DecimalFormat formatKI_Roll = editorKI_Roll.getFormat();
        formatKI_Roll.setMinimumFractionDigits(3);
        spinnerKI_Roll.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKI_Roll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKI_RollStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editorKD_Roll = (javax.swing.JSpinner.NumberEditor)spinnerKD_Roll.getEditor();
        java.text.DecimalFormat formatKD_Roll = editorKD_Roll.getFormat();
        formatKD_Roll.setMinimumFractionDigits(3);
        spinnerKD_Roll.setPreferredSize(new java.awt.Dimension(82, 20));
        spinnerKD_Roll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKD_RollStateChanged(evt);
            }
        });

        labelSetPoint_Roll.setText("SETPOINT");
        labelSetPoint_Roll.setPreferredSize(new java.awt.Dimension(100, 14));

        labelInput_Roll.setText("INPUT");
        labelInput_Roll.setPreferredSize(new java.awt.Dimension(100, 14));

        labelTimeRange_Roll.setText("Time Range");
        labelTimeRange_Roll.setPreferredSize(new java.awt.Dimension(100, 14));

        spinnerTimeRange_Roll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerTimeRange_RollStateChanged(evt);
            }
        });
        spinnerTimeRange_Roll.setValue(Chart.DEFAULT_RANGE);

        buttonClear_Roll.setText("Clear");
        buttonClear_Roll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClear_RollActionPerformed(evt);
            }
        });

        textSetPoint_Roll.setEditable(false);
        textSetPoint_Roll.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textSetPoint_Roll.setText("0");
        textSetPoint_Roll.setMaximumSize(new java.awt.Dimension(82, 20));
        textSetPoint_Roll.setPreferredSize(new java.awt.Dimension(82, 20));

        textInput_Roll.setEditable(false);
        textInput_Roll.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textInput_Roll.setText("0");
        textInput_Roll.setMaximumSize(new java.awt.Dimension(82, 20));
        textInput_Roll.setPreferredSize(new java.awt.Dimension(82, 20));

        javax.swing.GroupLayout panelConfigRollLayout = new javax.swing.GroupLayout(panelConfigRoll);
        panelConfigRoll.setLayout(panelConfigRollLayout);
        panelConfigRollLayout.setHorizontalGroup(
            panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigRollLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConfigRollLayout.createSequentialGroup()
                        .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSetPoint_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelInput_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelConfigRollLayout.createSequentialGroup()
                                .addComponent(labelTimeRange_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerTimeRange_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonClear_Roll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textSetPoint_Roll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textInput_Roll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelConfigRollLayout.createSequentialGroup()
                        .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelKI_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelKD_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelKP_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinnerKP_Roll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerKD_Roll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerKI_Roll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelConfigRollLayout.setVerticalGroup(
            panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigRollLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKP_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKP_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKI_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKI_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKD_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKD_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSetPoint_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textSetPoint_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelInput_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textInput_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigRollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerTimeRange_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTimeRange_Roll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear_Roll))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout panelGraphsLayout = new javax.swing.GroupLayout(panelGraphs);
        panelGraphs.setLayout(panelGraphsLayout);
        panelGraphsLayout.setHorizontalGroup(
            panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelConfigRoll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelConfigYaw, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelConfigPitch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelChartYaw, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelChartPitch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelChartRoll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelGraphsLayout.setVerticalGroup(
            panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraphsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelConfigYaw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelChartYaw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelConfigPitch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelChartPitch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGraphsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelChartRoll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelConfigRoll, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addComponent(panelSetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelGraphs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSetup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClear_YawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClear_YawActionPerformed
        chartYaw.clearAll();
    }//GEN-LAST:event_buttonClear_YawActionPerformed

    private void buttonClear_PitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClear_PitchActionPerformed
        chartPitch.clearAll();
    }//GEN-LAST:event_buttonClear_PitchActionPerformed

    private void buttonClear_RollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClear_RollActionPerformed
        chartRoll.clearAll();
    }//GEN-LAST:event_buttonClear_RollActionPerformed

    private void spinnerTimeRange_YawStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerTimeRange_YawStateChanged
        try {
            int range = Integer.parseInt(spinnerTimeRange_Yaw.getValue().toString());
            chartYaw.setFixedAutoRange(range);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_spinnerTimeRange_YawStateChanged

    private void spinnerTimeRange_PitchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerTimeRange_PitchStateChanged
        try {
            int range = Integer.parseInt(spinnerTimeRange_Pitch.getValue().toString());
            chartPitch.setFixedAutoRange(range);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_spinnerTimeRange_PitchStateChanged

    private void spinnerTimeRange_RollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerTimeRange_RollStateChanged
        try {
            int range = Integer.parseInt(spinnerTimeRange_Roll.getValue().toString());
            chartRoll.setFixedAutoRange(range);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_spinnerTimeRange_RollStateChanged

    private void spinnerKP_YawStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKP_YawStateChanged
        try {
            String number = spinnerKP_Yaw.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKP_Yaw.setValue(Double.parseDouble(number));

            serial.writeData(Serial.YAW_KP + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKP_Yaw.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKP_YawStateChanged

    private void spinnerKI_YawStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKI_YawStateChanged
        try {
            String number = spinnerKI_Yaw.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKI_Yaw.setValue(Double.parseDouble(number));

            serial.writeData(Serial.YAW_KI + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKI_Yaw.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKI_YawStateChanged

    private void spinnerKD_YawStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKD_YawStateChanged
        try {
            String number = spinnerKD_Yaw.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKD_Yaw.setValue(Double.parseDouble(number));

            serial.writeData(Serial.YAW_KD + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKD_Yaw.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKD_YawStateChanged

    private void spinnerKP_PitchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKP_PitchStateChanged
        try {
            String number = spinnerKP_Pitch.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKP_Pitch.setValue(Double.parseDouble(number));

            serial.writeData(Serial.PITCH_KP + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKP_Pitch.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKP_PitchStateChanged

    private void spinnerKI_PitchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKI_PitchStateChanged
        try {
            String number = spinnerKI_Pitch.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKI_Pitch.setValue(Double.parseDouble(number));

            serial.writeData(Serial.PITCH_KI + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKI_Pitch.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKI_PitchStateChanged

    private void spinnerKD_PitchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKD_PitchStateChanged
        try {
            String number = spinnerKD_Pitch.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKD_Pitch.setValue(Double.parseDouble(number));

            serial.writeData(Serial.PITCH_KD + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKD_Pitch.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKD_PitchStateChanged

    private void spinnerKP_RollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKP_RollStateChanged
        try {
            String number = spinnerKP_Roll.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKP_Roll.setValue(Double.parseDouble(number));

            serial.writeData(Serial.ROLL_KP + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKP_Roll.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKP_RollStateChanged

    private void spinnerKI_RollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKI_RollStateChanged
        try {
            String number = spinnerKI_Roll.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKI_Roll.setValue(Double.parseDouble(number));

            serial.writeData(Serial.ROLL_KI + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKI_Roll.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKI_RollStateChanged

    private void spinnerKD_RollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKD_RollStateChanged
        try {
            String number = spinnerKD_Roll.getValue().toString();
            number = String.format("%.3f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKD_Roll.setValue(Double.parseDouble(number));

            serial.writeData(Serial.ROLL_KD + number + Serial.END);
        } catch (NumberFormatException e) {
            spinnerKD_Roll.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKD_RollStateChanged

    private void buttonSerialConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSerialConnectActionPerformed
        if (commPort != null && commPort.isOpen()) {
            commPort.closePort();                                               // If it is connected, disconnect
        }

        commPort = SerialPort.getCommPort(
                textSerialPort.getText().toUpperCase());                        // Create a new SerialPort object
        commPort.setBaudRate(
                Integer.parseInt((String) boxSerialBaudRate.getSelectedItem()));// Set BaudRate

        if (!commPort.openPort()) {                                             // Try to open connection!
            serialStatus.setForeground(Color.RED);                              // Update STATUS color      
            serialStatus.setText("ERROR OCCURRED");                             // Update STATUS text
            return;
        }

        serial.setSerialPort(commPort);                                         // Copies Serial Port object to Serial class 
        serial.initListener(this);                                              // Starts Listener to receive datas

        serialStatus.setForeground(Color.GREEN);                                // Update STATUS color   
        serialStatus.setText("CONNECTED");                                      // Update STATUS text
    }//GEN-LAST:event_buttonSerialConnectActionPerformed

    private void buttonSerialDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSerialDisconnectActionPerformed
        if (commPort != null) {
            if (commPort.isOpen()) {
                commPort.removeDataListener();                                  // Remove event listener to Serial Port
                commPort.closePort();                                           // If there's connection, cancels

                commPort = null;
                serial.stopListener();

                serialStatus.setForeground(Color.RED);                          // Update STATUS color 
                serialStatus.setText("DISCONNECTED");                           // Update STATUS text
            }
        }
    }//GEN-LAST:event_buttonSerialDisconnectActionPerformed

    private void buttonSavePIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSavePIDActionPerformed
        String data[] = new String[PidData.DATA_SIZE];

        data[PidData.YAW_KP] = String.format("%.3f", spinnerKP_Yaw.getValue()).replace(',', '.');
        data[PidData.YAW_KI] = String.format("%.3f", spinnerKI_Yaw.getValue()).replace(',', '.');
        data[PidData.YAW_KD] = String.format("%.3f", spinnerKD_Yaw.getValue()).replace(',', '.');
        data[PidData.PITCH_KP] = String.format("%.3f", spinnerKP_Pitch.getValue()).replace(',', '.');
        data[PidData.PITCH_KI] = String.format("%.3f", spinnerKI_Pitch.getValue()).replace(',', '.');
        data[PidData.PITCH_KD] = String.format("%.3f", spinnerKD_Pitch.getValue()).replace(',', '.');
        data[PidData.ROLL_KP] = String.format("%.3f", spinnerKP_Roll.getValue()).replace(',', '.');
        data[PidData.ROLL_KI] = String.format("%.3f", spinnerKI_Roll.getValue()).replace(',', '.');
        data[PidData.ROLL_KD] = String.format("%.3f", spinnerKD_Roll.getValue()).replace(',', '.');

        SaveData.save(this, data);
    }//GEN-LAST:event_buttonSavePIDActionPerformed

    private void buttonLoadPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadPIDActionPerformed
        Float data[] = LoadData.load(this);

        spinnerKP_Yaw.setValue(data[PidData.YAW_KP]);
        spinnerKI_Yaw.setValue(data[PidData.YAW_KI]);
        spinnerKD_Yaw.setValue(data[PidData.YAW_KD]);
        spinnerKP_Pitch.setValue(data[PidData.PITCH_KP]);
        spinnerKI_Pitch.setValue(data[PidData.PITCH_KI]);
        spinnerKD_Pitch.setValue(data[PidData.PITCH_KD]);
        spinnerKP_Roll.setValue(data[PidData.ROLL_KP]);
        spinnerKI_Roll.setValue(data[PidData.ROLL_KI]);
        spinnerKD_Roll.setValue(data[PidData.ROLL_KD]);
    }//GEN-LAST:event_buttonLoadPIDActionPerformed

    private void buttonSaveChartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveChartsActionPerformed

        ArrayList<Chart> charts = new ArrayList<>();

        if (saveYaw.isSelected()) {
            charts.add(chartYaw);
        }
        if (savePitch.isSelected()) {
            charts.add(chartPitch);
        }
        if (saveRoll.isSelected()) {
            charts.add(chartRoll);
        }
        if (saveMotors.isSelected()) {
            charts.add(chartMotors);
        }

        SaveCharts.save(this, charts);
    }//GEN-LAST:event_buttonSaveChartsActionPerformed

    private void panelGraphsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelGraphsMouseClicked
        if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3){
            String answer = JOptionPane.showInputDialog(this,
                    "Enter the number of points you want to store in the charts", 3000);
            
            try{
                int value = Integer.parseInt(answer);
                
                chartYaw.setMaximumItemCount(value);
                chartPitch.setMaximumItemCount(value);
                chartRoll.setMaximumItemCount(value);
                chartMotors.setMaximumItemCount(value);
            } catch (NumberFormatException e){
            }
        }            
    }//GEN-LAST:event_panelGraphsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DroneTunerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DroneTunerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DroneTunerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DroneTunerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DroneTunerWindow().setVisible(true);
        });
    }

    private void configCharts() {
        // ==== Configuration of the Charts ==== //

        //---- Chart YAW ----
        chartYaw = new Chart(panelChartYaw, "Yaw");
        chartYaw.addChart("Input");
        chartYaw.addChart("SetPoint");
        chartYaw.setChartDataListener((String name1, XYDataItem dataItem) -> {
            float value = dataItem.getY().floatValue();
            if (name1.equals("Input")) {
                textInput_Yaw.setText(Float.toString(value));
            } else if (name1.equals("SetPoint")) {
                textSetPoint_Yaw.setText(Float.toString(value));
            }
        });
        chartYaw.initialize();

        //---- Chart PITCH ----
        chartPitch = new Chart(panelChartPitch, "Pitch");
        chartPitch.addChart("Input");
        chartPitch.addChart("SetPoint");
        chartPitch.setChartDataListener((String name1, XYDataItem dataItem) -> {
            float value = dataItem.getY().floatValue();
            if (name1.equals("Input")) {
                textInput_Pitch.setText(Float.toString(value));
            } else if (name1.equals("SetPoint")) {
                textSetPoint_Pitch.setText(Float.toString(value));
            }
        });
        chartPitch.initialize();

        //---- Chart ROLL ----
        chartRoll = new Chart(panelChartRoll, "Roll");
        chartRoll.addChart("Input");
        chartRoll.addChart("SetPoint");
        chartRoll.setChartDataListener((String name1, XYDataItem dataItem) -> {
            float value = dataItem.getY().floatValue();
            if (name1.equals("Input")) {
                textInput_Roll.setText(Float.toString(value));
            } else if (name1.equals("SetPoint")) {
                textSetPoint_Roll.setText(Float.toString(value));
            }
        });
        chartRoll.initialize();

        //---- Chart MOTORS ----
        chartMotors = new Chart(null, "Motors");
        chartMotors.addChart(DroneMotors.M1_NAME);
        chartMotors.addChart(DroneMotors.M2_NAME);
        chartMotors.addChart(DroneMotors.M3_NAME);
        chartMotors.addChart(DroneMotors.M4_NAME);
        chartMotors.setChartDataListener(new Chart.ChartDataListener() {
            @Override
            public void onChartDataListener(String name, XYDataItem dataItem) {

                int value = dataItem.getY().intValue();

                switch (name) {
                    case DroneMotors.M1_NAME:
                        Drone.motors[DroneMotors.M1_ID].power = value;
                        labelPowerM1.setText(Drone.motors[DroneMotors.M1_ID].getPowerPercent() + "%");
                        break;
                    case DroneMotors.M2_NAME:
                        Drone.motors[DroneMotors.M2_ID].power = value;
                        labelPowerM2.setText(Drone.motors[DroneMotors.M2_ID].getPowerPercent() + "%");
                        break;
                    case DroneMotors.M3_NAME:
                        Drone.motors[DroneMotors.M3_ID].power = value;
                        labelPowerM3.setText(Drone.motors[DroneMotors.M3_ID].getPowerPercent() + "%");
                        break;
                    case DroneMotors.M4_NAME:
                        Drone.motors[DroneMotors.M4_ID].power = value;
                        labelPowerM4.setText(Drone.motors[DroneMotors.M4_ID].getPowerPercent() + "%");
                        break;
                }

            }
        });
        chartMotors.initialize();
        // == end Configuration of the Charts == //
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DroneImage;
    private javax.swing.JComboBox<String> boxSerialBaudRate;
    private javax.swing.JButton buttonClear_Pitch;
    private javax.swing.JButton buttonClear_Roll;
    private javax.swing.JButton buttonClear_Yaw;
    private javax.swing.JButton buttonLoadPID;
    private javax.swing.JButton buttonSaveCharts;
    private javax.swing.JButton buttonSavePID;
    private javax.swing.JButton buttonSerialConnect;
    private javax.swing.JButton buttonSerialDisconnect;
    private javax.swing.JLabel labelBaudRate;
    private javax.swing.JLabel labelChartData;
    private javax.swing.JLabel labelInput_Pitch;
    private javax.swing.JLabel labelInput_Roll;
    private javax.swing.JLabel labelInput_Yaw;
    private javax.swing.JLabel labelKD_Pitch;
    private javax.swing.JLabel labelKD_Roll;
    private javax.swing.JLabel labelKD_Yaw;
    private javax.swing.JLabel labelKI_Pitch;
    private javax.swing.JLabel labelKI_Roll;
    private javax.swing.JLabel labelKI_Yaw;
    private javax.swing.JLabel labelKP_Pitch;
    private javax.swing.JLabel labelKP_Roll;
    private javax.swing.JLabel labelKP_Yaw;
    private javax.swing.JLabel labelPIDParam;
    private javax.swing.JLabel labelPort;
    private javax.swing.JLabel labelPowerM1;
    private javax.swing.JLabel labelPowerM2;
    private javax.swing.JLabel labelPowerM3;
    private javax.swing.JLabel labelPowerM4;
    private javax.swing.JLabel labelSetPoint_Pitch;
    private javax.swing.JLabel labelSetPoint_Roll;
    private javax.swing.JLabel labelSetPoint_Yaw;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelTimeRange_Pitch;
    private javax.swing.JLabel labelTimeRange_Roll;
    private javax.swing.JLabel labelTimeRange_Yaw;
    private javax.swing.JPanel panelChartPitch;
    private javax.swing.JPanel panelChartRoll;
    private javax.swing.JPanel panelChartYaw;
    private javax.swing.JPanel panelConfigPitch;
    private javax.swing.JPanel panelConfigRoll;
    private javax.swing.JPanel panelConfigYaw;
    private javax.swing.JPanel panelData;
    private javax.swing.JPanel panelGraphs;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelMotors;
    private javax.swing.JPanel panelSerialConn;
    private javax.swing.JPanel panelSetup;
    private javax.swing.JCheckBox saveMotors;
    private javax.swing.JCheckBox savePitch;
    private javax.swing.JCheckBox saveRoll;
    private javax.swing.JCheckBox saveYaw;
    private javax.swing.JLabel serialStatus;
    private javax.swing.JSpinner spinnerKD_Pitch;
    private javax.swing.JSpinner spinnerKD_Roll;
    private javax.swing.JSpinner spinnerKD_Yaw;
    private javax.swing.JSpinner spinnerKI_Pitch;
    private javax.swing.JSpinner spinnerKI_Roll;
    private javax.swing.JSpinner spinnerKI_Yaw;
    private javax.swing.JSpinner spinnerKP_Pitch;
    private javax.swing.JSpinner spinnerKP_Roll;
    private javax.swing.JSpinner spinnerKP_Yaw;
    private javax.swing.JSpinner spinnerTimeRange_Pitch;
    private javax.swing.JSpinner spinnerTimeRange_Roll;
    private javax.swing.JSpinner spinnerTimeRange_Yaw;
    private javax.swing.JTextField textInput_Pitch;
    private javax.swing.JTextField textInput_Roll;
    private javax.swing.JTextField textInput_Yaw;
    private javax.swing.JTextField textSerialPort;
    private javax.swing.JTextField textSetPoint_Pitch;
    private javax.swing.JTextField textSetPoint_Roll;
    private javax.swing.JTextField textSetPoint_Yaw;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onDataListener(String parameter, float value) {

        float X = 0.1f;

        if (parameter.equals(Serial.YAW_INPUT)) {
            chartYaw.addData("Input", new XYDataItem(chartYaw.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.YAW_SETPOINT)) {
            chartYaw.addData("SetPoint", new XYDataItem(chartYaw.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.PITCH_INPUT)) {
            chartPitch.addData("Input", new XYDataItem(chartPitch.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.PITCH_SETPOINT)) {
            chartPitch.addData("SetPoint", new XYDataItem(chartPitch.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.ROLL_INPUT)) {
            chartRoll.addData("Input", new XYDataItem(chartRoll.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.ROLL_SETPOINT)) {
            chartRoll.addData("SetPoint", new XYDataItem(chartRoll.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.M1)) {
            chartMotors.addData(DroneMotors.M1_NAME, new XYDataItem(chartMotors.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.M2)) {
            chartMotors.addData(DroneMotors.M2_NAME, new XYDataItem(chartMotors.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.M3)) {
            chartMotors.addData(DroneMotors.M3_NAME, new XYDataItem(chartMotors.getXAxisValue() * X + X, value));
        } else if (parameter.equals(Serial.M4)) {
            chartMotors.addData(DroneMotors.M4_NAME, new XYDataItem(chartMotors.getXAxisValue() * X + X, value));

            repaint();
        }
    }

}
